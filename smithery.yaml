name: '@brendancopley/mcp-chain-of-draft-prompt-tool'
description: >-
  A TypeScript-based Model Context Protocol (MCP) server for Chain of Draft
  reasoning
version: "1.0.0"

startCommand:
  type: stdio
  configSchema:
    type: object
    title: MCP Server Configuration
    description: Configuration options for the MCP server
    properties:
      chainOfDraft:
        type: object
        title: Chain of Draft Tool
        description: Configuration for the Chain of Draft reasoning tool
        properties:
          enabled:
            type: boolean
            default: true
            description: Enable/disable the Chain of Draft tool
          maxWordsPerStep:
            type: number
            default: 8
            minimum: 3
            maximum: 10000
            description: Maximum words per reasoning step
          adaptiveWordLimit:
            type: boolean
            default: true
            description: Enable/disable adaptive word limits based on complexity
      methods:
        type: object
        title: Available Methods
        description: Configuration for available reasoning methods
        properties:
          chainOfDraftSolve:
            type: object
            description: Solve a reasoning problem using Chain of Draft approach
            properties:
              problem:
                type: string
                description: The problem to solve
              domain:
                type: string
                description: 'Domain for context (math, logic, code, common-sense, etc.)'
              maxWordsPerStep:
                type: number
                description: Maximum words per reasoning step
              approach:
                type: string
                description: Force 'CoD' or 'CoT' approach
              enforceFormat:
                type: boolean
                description: Whether to enforce the word limit
              adaptiveWordLimit:
                type: boolean
                description: Adjust word limits based on complexity
            required:
              - problem
          mathSolve:
            type: object
            description: Solve a math problem using Chain of Draft reasoning
            properties:
              problem:
                type: string
                description: The math problem to solve
              approach:
                type: string
                description: Force 'CoD' or 'CoT' approach
              maxWordsPerStep:
                type: number
                description: Maximum words per step
            required:
              - problem
          codeSolve:
            type: object
            description: Solve a coding problem using Chain of Draft reasoning
            properties:
              problem:
                type: string
                description: The coding problem to solve
              approach:
                type: string
                description: Force 'CoD' or 'CoT' approach
              maxWordsPerStep:
                type: number
                description: Maximum words per step
            required:
              - problem
          logicSolve:
            type: object
            description: Solve a logic problem using Chain of Draft reasoning
            properties:
              problem:
                type: string
                description: The logic problem to solve
              approach:
                type: string
                description: Force 'CoD' or 'CoT' approach
              maxWordsPerStep:
                type: number
                description: Maximum words per step
            required:
              - problem
          getPerformanceStats:
            type: object
            description: Get performance statistics for CoD vs CoT approaches
            properties:
              domain:
                type: string
                description: Filter for specific domain
          getTokenReduction:
            type: object
            description: Get token reduction statistics for CoD vs CoT
            properties: {}
          analyzeProblemComplexity:
            type: object
            description: Analyze the complexity of a problem
            properties:
              problem:
                type: string
                description: The problem to analyze
              domain:
                type: string
                description: Problem domain
            required:
              - problem
    required: []
  commandFunction: |-
    (config) => ({
      command: 'node',
      args: ['dist/index.js'],
      env: {
        NODE_ENV: config.NODE_ENV || 'production',
        LLM_PROVIDER: config.LLM_PROVIDER || 'anthropic',
        LLM_MODEL: config.LLM_MODEL || 'claude-3-7-sonnet-latest',
        ANTHROPIC_API_KEY: config.ANTHROPIC_API_KEY,
        OPENAI_API_KEY: config.OPENAI_API_KEY,
        MISTRAL_API_KEY: config.MISTRAL_API_KEY,
        ANTHROPIC_BASE_URL: config.ANTHROPIC_BASE_URL || 'https://api.anthropic.com',
        OPENAI_BASE_URL: config.OPENAI_BASE_URL || 'https://api.openai.com',
        OLLAMA_BASE_URL: config.OLLAMA_BASE_URL || 'http://localhost:11434',
        COD_MAX_WORDS_PER_STEP: config.COD_MAX_WORDS_PER_STEP || '5',
        ENFORCE_FORMAT: config.ENFORCE_FORMAT || 'true',
        ADAPTIVE_WORD_LIMIT: config.ADAPTIVE_WORD_LIMIT || 'true',
        COD_DB_URL: config.COD_DB_URL || 'sqlite:///cod_analytics.db',
        COD_EXAMPLES_DB: config.COD_EXAMPLES_DB || 'cod_examples.db',
        COD_DEFAULT_MODEL: config.COD_DEFAULT_MODEL || 'claude-3-7-sonnet-latest',
        COD_MAX_TOKENS: config.COD_MAX_TOKENS || '500'
      }
    })

clients:
  - claude
  - cursor
  - windsurf
  - cline
  - typescript
